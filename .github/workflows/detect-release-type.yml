# ① PR承認時、即時 or 予約リリース判定（PR本文の release_at: のみで判定）
name: detect-release-type

on:
  pull_request_review:
    types: [submitted]

permissions:
  contents: read           # リポ読み取り
  actions: write           # gh workflow run に必要
  issues: write            # ラベル作成/付与・コメントに必要
  pull-requests: write     # PR編集系で使用可（保険）

jobs:
  detect_release:
    # 承認レビュー かつ base が main のときだけ動く
    if: >
      github.event.review.state == 'approved' &&
      github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      # PR本文から予約日時を抽出（release_at: のみ）
      - name: Extract schedule from PR body
        id: schedule
        shell: bash
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
        run: |
          set -euo pipefail
          body="${PR_BODY:-}"

          # 受理する唯一の記法（UTC の Z 指定のみ）
          # 例: release_at: 2025-09-21T12:00:00Z
          candidate=$(printf "%s\n" "$body" | grep -Eo \
            'release_at:[[:space:]]*[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z' \
            | tail -n1 || true)

          if [ -n "${candidate:-}" ]; then
            # 接頭辞を剥がして日時だけにする
            ts=$(printf "%s" "$candidate" | sed -E 's/^release_at:[[:space:]]*//')

            # 形式チェック兼ねて UTC(Z) に正規化
            utc=$(date -u -d "$ts" +%Y-%m-%dT%H:%M:%SZ 2>/dev/null || true)

            if [ -n "${utc:-}" ]; then
              now=$(date -u +%s)
              when=$(date -u -d "$utc" +%s)
              if [ "$when" -le "$now" ]; then
                echo "found=false"  >> "$GITHUB_OUTPUT"
                echo "error=Schedule time is in the past: $utc" >> "$GITHUB_OUTPUT"
              else
                echo "found=true"   >> "$GITHUB_OUTPUT"
                echo "release_time=$utc" >> "$GITHUB_OUTPUT"
                echo "error="       >> "$GITHUB_OUTPUT"
              fi
            else
              echo "found=false"    >> "$GITHUB_OUTPUT"
              echo "error=Invalid datetime format: $ts" >> "$GITHUB_OUTPUT"
            fi

          else
            # 正規表現にはヒットしなかった。キーワードだけ書かれて空行か？
            if printf "%s\n" "$body" | grep -qE '^[[:space:]]*release_at:[[:space:]]*$'; then
              # 空の release_at: は不正扱い
              echo "found=false"    >> "$GITHUB_OUTPUT"
              echo "error=Empty release_at (no datetime provided)" >> "$GITHUB_OUTPUT"
            else
              # 記法そのものが無い → 即時
              echo "found=false"    >> "$GITHUB_OUTPUT"
              echo "error="         >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: Get PR branch
        id: pr_branch
        run: echo "pr_branch=${{ github.event.pull_request.head.ref }}" >> "$GITHUB_OUTPUT"

      - name: Make schedule name
        id: sched
        run: echo "name=release-${{ github.run_id }}-${{ github.run_attempt }}" >> "$GITHUB_OUTPUT"

      # 予約可視化のため、必要ラベルを（なければ）作成
      - name: Ensure labels exist
        run: |
          set -euo pipefail
          gh label create 'release:scheduled' --color '0E8A16' --description 'Scheduled release' --force || true
          gh label create 'release:immediate' --color '1D76DB' --description 'Immediate release' --force || true
          gh label create 'release:invalid'   --color 'B60205' --description 'Invalid/expired schedule' --force || true

      # ラベル付与：予約OK
      - name: Label PR as scheduled + comment
        if: steps.schedule.outputs.found == 'true'
        env:
          REPO: ${{ github.repository }}
          PR: ${{ github.event.pull_request.number }}
          WHEN: ${{ steps.schedule.outputs.release_time }}
        run: |
          set -euo pipefail
          gh pr edit "$PR" -R "$REPO" --add-label 'release:scheduled' \
                                      --remove-label 'release:immediate' \
                                      --remove-label 'release:invalid' || true
          gh pr comment "$PR" -R "$REPO" --body ":alarm_clock: 予約公開を検出: **$WHEN** (UTC)"

      # ラベル付与：記法なし（即時）
      - name: Label PR as immediate (no schedule)
        if: steps.schedule.outputs.found == 'false' && steps.schedule.outputs.error == ''
        env:
          REPO: ${{ github.repository }}
          PR: ${{ github.event.pull_request.number }}
        run: |
          set -euo pipefail
          gh pr edit "$PR" -R "$REPO" --add-label 'release:immediate' \
                                      --remove-label 'release:scheduled' \
                                      --remove-label 'release:invalid' || true

      # ラベル付与：不正（空/フォーマット不正/過去）
      - name: Label PR as invalid (format/past)
        if: steps.schedule.outputs.found == 'false' && steps.schedule.outputs.error != ''
        env:
          REPO: ${{ github.repository }}
          PR: ${{ github.event.pull_request.number }}
          ERR: ${{ steps.schedule.outputs.error }}
        run: |
          set -euo pipefail
          gh pr edit "$PR" -R "$REPO" --add-label 'release:invalid' \
                                      --remove-label 'release:scheduled' \
                                      --remove-label 'release:immediate' || true
          gh pr comment "$PR" -R "$REPO" --body ":warning: 予約指定が無効です（$ERR）。このPRは**マージを行いません**。release_at: <UTC-Z> で再指定してください。"

      # 予約あり → EventBridge Scheduler で Lambda 起動を予約
      - name: Configure AWS
        if: steps.schedule.outputs.found == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Register one-off schedule (Scheduler→Lambda)
        if: steps.schedule.outputs.found == 'true'
        run: |
          aws scheduler create-schedule \
            --name "${{ steps.sched.outputs.name }}" \
            --schedule-expression "at(${{ steps.schedule.outputs.release_time }})" \
            --flexible-time-window '{"Mode":"OFF"}' \
            --target '{
              "Arn": "'"${{ secrets.LAMBDA_ARN }}"'",
              "RoleArn": "'"${{ secrets.SCHEDULER_ROLE_ARN }}"'",
              "Input": "{\"ownerRepo\":\"'${{ github.repository }}'\",\"workflow\":\"main-merge.yml\",\"pr_branch\":\"'${{ steps.pr_branch.outputs.pr_branch }}'\"}"
            }'

      # 即時（記法なし＝errorが空のときだけ）を起動
      - name: Trigger immediate merge (no schedule)
        if: steps.schedule.outputs.found == 'false' && steps.schedule.outputs.error == ''
        run: |
          gh workflow run main-merge.yml \
            -R '${{ github.repository }}' \
            --ref main \
            -f pr_branch='${{ steps.pr_branch.outputs.pr_branch }}'

      # 不正の場合はここで終了（マージはしない）
      - name: Stop on invalid schedule (labelled only)
        if: steps.schedule.outputs.found == 'false' && steps.schedule.outputs.error != ''
        run: |
          echo "::warning ::Invalid schedule detected. Merge is skipped."
