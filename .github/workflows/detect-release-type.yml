# ① PR承認時、即時 or 予約リリース判定（PR本文の文言で判定）
name: detect-release-type

on:
  pull_request_review:
    types: [submitted]

permissions:
  contents: read
  actions: write  # gh workflow run に必要

jobs:
  detect_release:
    if: >
      github.event.review.state == 'approved' &&
      github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      # PR本文から予約日時を抽出（3パターン対応：release_at: / 予約公開: / @schedule(...)）
      - name: Extract schedule from PR body
        id: schedule
        shell: bash
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
        run: |
          set -euo pipefail
          body="${PR_BODY:-}"

          # 1) release_at: <ISO8601>
          candidate=$(printf "%s\n" "$body" | grep -Eo \
            'release_at:[[:space:]]*[0-9]{4}-[0-9]{2}-[0-9]{2}[T ]?[0-9]{2}:[0-9]{2}(:[0-9]{2})?([zZ]|([+-][0-9]{2}:[0-9]{2}))' \
            | tail -n1 || true)

          # 2) 予約公開: <ISO8601>
          if [ -z "${candidate:-}" ]; then
            candidate=$(printf "%s\n" "$body" | grep -Eo \
              '予約公開:[[:space:]]*[0-9]{4}-[0-9]{2}-[0-9]{2}[T ]?[0-9]{2}:[0-9]{2}(:[0-9]{2})?([zZ]|([+-][0-9]{2}:[0-9]{2}))' \
              | tail -n1 || true)
          fi

          # 3) @schedule(<ISO8601>)
          if [ -z "${candidate:-}" ]; then
            candidate=$(printf "%s\n" "$body" | grep -Eo \
              '@schedule\([0-9]{4}-[0-9]{2}-[0-9]{2}[T ]?[0-9]{2}:[0-9]{2}(:[0-9]{2})?([zZ]|([+-][0-9]{2}:[0-9]{2}))\)' \
              | tail -n1 | sed -E 's/^@schedule\(|\)$//g' || true)
          fi

          if [ -n "${candidate:-}" ]; then
            # 接頭辞を剥がして日時だけにする
            ts=$(printf "%s" "$candidate" | sed -E 's/^(release_at:|予約公開:)[[:space:]]*//')
            # スペース区切りでもOKに（ISOのTへ正規化）
            ts="${ts/ /T}"
            # GNU date で UTC(Z) に正規化（例: 2025-09-21T12:00:00Z）
            utc=$(date -u -d "$ts" +%Y-%m-%dT%H:%M:%SZ 2>/dev/null || true)

            if [ -n "${utc:-}" ]; then
              # 過去時刻は危険なので無効化
              now=$(date -u +%s)
              when=$(date -u -d "$utc" +%s)
              if [ "$when" -le "$now" ]; then
                echo "found=false" >> "$GITHUB_OUTPUT"
                echo "error=Schedule time is in the past: $utc" >> "$GITHUB_OUTPUT"
              else
                echo "found=true" >> "$GITHUB_OUTPUT"
                echo "release_time=$utc" >> "$GITHUB_OUTPUT"
              fi
            else
              echo "found=false" >> "$GITHUB_OUTPUT"
              echo "error=Invalid datetime format: $ts" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Get PR branch
        id: pr_branch
        run: echo "pr_branch=${{ github.event.pull_request.head.ref }}" >> "$GITHUB_OUTPUT"

      - name: Make schedule name
        id: sched
        run: echo "name=release-${{ github.run_id }}-${{ github.run_attempt }}" >> "$GITHUB_OUTPUT"

      # 予約あり → EventBridge Scheduler でLambda起動を予約
      - name: Configure AWS
        if: steps.schedule.outputs.found == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Register one-off schedule (Scheduler→Lambda)
        if: steps.schedule.outputs.found == 'true'
        run: |
          aws scheduler create-schedule \
            --name "${{ steps.sched.outputs.name }}" \
            --schedule-expression "at(${{ steps.schedule.outputs.release_time }})" \
            --flexible-time-window '{"Mode":"OFF"}' \
            --target '{
              "Arn": "'"${{ secrets.LAMBDA_ARN }}"'",
              "RoleArn": "'"${{ secrets.SCHEDULER_ROLE_ARN }}"'",
              "Input": "{\"ownerRepo\":\"'${{ github.repository }}'\",\"workflow\":\"main-merge.yml\",\"pr_branch\":\"'${{ steps.pr_branch.outputs.pr_branch }}'\"}"
            }'

      # 予約なし または 無効な日時 → すぐ②( main-merge ) を起動
      - name: Trigger immediate merge (no or invalid schedule)
        if: steps.schedule.outputs.found == 'false'
        run: gh workflow run main-merge.yml -R '${{ github.repository }}' -f pr_branch='${{ steps.pr_branch.outputs.pr_branch }}'
